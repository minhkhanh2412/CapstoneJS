// CartAPI Service
// API Cart c√≥ structure: { id, product: {...}, soLuong: number }

let cartService = {
  // L·∫•y danh s√°ch t·∫•t c·∫£ items trong gi·ªè h√†ng
  getList: () => {
    return axios({
      url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CART}`,
      method: "GET",
    });
  },

  // L·∫•y cart item theo ID
  getById: (idCart) => {
    return axios({
      url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CART}/${idCart}`,
      method: "GET",
    });
  },

  // Th√™m item v√†o gi·ªè h√†ng
  addToCart: (cartItem) => {
    return axios({
      url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CART}`,
      method: "POST",
      data: cartItem,
    });
  },

  // C·∫≠p nh·∫≠t cart item (s·ªë l∆∞·ª£ng, th√¥ng tin)
  updateCartItem: (updatedCartItem, idCart) => {
    return axios.put(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CART}/${idCart}`, updatedCartItem); // G·ª≠i tr·ª±c ti·∫øp thay v√¨ wrap
  },

  // X√≥a item kh·ªèi gi·ªè h√†ng
  deleteById: (idCart) => {
    return axios({
      url: `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CART}/${idCart}`,
      method: "DELETE",
    });
  },

  // X√≥a to√†n b·ªô gi·ªè h√†ng - Sequential deletion ƒë·ªÉ tr√°nh race condition  
  clearCart: () => {
    const deleteAllItems = async () => {
      let remainingAttempts = 3; // S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
      
      while (remainingAttempts > 0) {
        try {
          // L·∫•y danh s√°ch hi·ªán t·∫°i
          const res = await cartService.getList();
          const items = res.data;
          
          console.log(`üóëÔ∏è Attempt ${4 - remainingAttempts}: Found ${items.length} items to delete`);
          
          if (items.length === 0) {
            console.log("‚úÖ Cart is now empty");
            return;
          }
          
          // X√≥a t·ª´ng item m·ªôt c√°ch tu·∫ßn t·ª±
          for (let item of items) {
            try {
              console.log(`üóëÔ∏è Deleting item: ${item.id} (${item.product?.name || 'Unknown'})`);
              await cartService.deleteById(item.id);
              console.log(`‚úÖ Successfully deleted item: ${item.id}`);
              
              // Th√™m delay nh·ªè ƒë·ªÉ API k·ªãp x·ª≠ l√Ω
              await new Promise(resolve => setTimeout(resolve, 100));
            } catch (err) {
              console.error(`‚ùå Failed to delete item ${item.id}:`, err);
              // Ti·∫øp t·ª•c x√≥a c√°c item kh√°c
            }
          }
          
          // Ki·ªÉm tra l·∫°i sau khi x√≥a
          const verifyRes = await cartService.getList();
          if (verifyRes.data.length === 0) {
            console.log("‚úÖ All cart items deleted successfully");
            return;
          } else {
            console.warn(`‚ö†Ô∏è ${verifyRes.data.length} items still remain, retrying...`);
            remainingAttempts--;
          }
          
        } catch (err) {
          console.error("‚ùå Error during cart clearing:", err);
          remainingAttempts--;
        }
      }
      
      // N·∫øu sau 3 l·∫ßn v·∫´n kh√¥ng x√≥a h·∫øt
      const finalCheck = await cartService.getList();
      if (finalCheck.data.length > 0) {
        console.error(`‚ùå Failed to clear cart completely. ${finalCheck.data.length} items remaining.`);
        throw new Error(`Unable to clear cart completely. ${finalCheck.data.length} items remaining.`);
      }
    };
    
    return deleteAllItems();
  }
};