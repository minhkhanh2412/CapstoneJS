// Admin Page Logic

// === VARIABLES ===
let allProducts = []; // L∆∞u t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ API
let editingProductId = null; // ID s·∫£n ph·∫©m ƒëang ƒë∆∞·ª£c edit

// === FETCH PRODUCTS LIST ===
let fetchListProducts = () => {
  console.log("üìû Calling fetchListProducts...");
  console.log("üîç Utils:", Utils);
  console.log("üîç productService:", productService);
  console.log("üîç API_CONFIG:", API_CONFIG);
  
  Utils.turnOnLoading();
  productService
    .getList()
    .then((res) => {
      Utils.turnOffLoading();
      let products = res.data;
      console.log("üöÄ - Products:", products);
      console.log("üöÄ - Products length:", products.length);
      allProducts = products;
      renderProductsTable(products);
    })
    .catch((err) => {
      Utils.turnOffLoading();
      console.log("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
      console.error("‚ùå Full error:", err);
      alert("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch s·∫£n ph·∫©m!");
    });
};

// G·ªçi khi trang load
console.log("üèÅ Starting admin.js...");

// ƒê·∫£m b·∫£o DOM ƒë√£ load xong
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', fetchListProducts);
} else {
  fetchListProducts();
}

// === RENDER PRODUCTS TABLE === 
let renderProductsTable = (products) => {
  console.log("Rendering products table...");
  console.log("Products to render:", products);
  console.log("Products count:", products.length);
  
  let contentHTML = "";

  products.forEach((product) => {
    let { id, name, price, img, desc } = product;
    
    let rowHTML = `
      <tr>
        <td>${id}</td>
        <td>${name}</td>
        <td>${Utils.formatPrice(price)}</td>
        <td><img src="${img}" width="100" height="100" style="border-radius: 6px; object-fit: cover;"></td>
        <td>${desc}</td>
        <td>
          <button onclick="deleteProduct('${id}')" class="btn btn-info">DELETE</button>
          <button onclick="editProduct('${id}')" data-bs-toggle="modal" data-bs-target="#phoneModal" class="btn btn-warning">EDIT</button>
        </td>
      </tr>
    `;
    contentHTML += rowHTML;
  });

  // console.log("Generated HTML:", contentHTML);
  
  const tbodyElement = document.querySelector("#tbody");
  // console.log("tbody element:", tbodyElement);
  
  if (tbodyElement) {
    tbodyElement.innerHTML = contentHTML;
    console.log("‚úÖTable rendered successfully!");
  } else {
    console.error("‚ùå tbody element not found!");
  }
};

// === DELETE PRODUCT ===
let deleteProduct = (productId) => {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
    Utils.turnOnLoading();
    productService
      .deleteById(productId)
      .then((res) => {
        Utils.turnOffLoading();
        console.log("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng:", res);
        alert("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
        fetchListProducts();
      })
      .catch((err) => {
        Utils.turnOffLoading();
        console.log("L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
        alert("C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m!");
      });
  }
};

// === VALIDATE DUPLICATE NAME ===
let validateProductName = (name, excludeId = null) => {
  return allProducts.some(product => 
    product.name.toLowerCase().trim() === name.toLowerCase().trim() && 
    product.id !== excludeId
  );
};

// === CREATE PRODUCT === 
let createProduct = () => {
  const name = document.getElementById("name").value.trim();
  const price = document.getElementById("price").value;
  const screen = document.getElementById("screen").value;
  const backCamera = document.getElementById("backCamera").value;
  const frontCamera = document.getElementById("frontCamera").value;
  const img = document.getElementById("img").value;
  const desc = document.getElementById("desc").value;
  const type = document.getElementById("type").value;

  // Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o r·ªóng
  if (!name || !price || !screen || !backCamera || !frontCamera || !img || !desc || !type || type === "Select brand") {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  // Ki·ªÉm tra tr√πng t√™n s·∫£n ph·∫©m
  if (validateProductName(name)) {
    alert("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn t√™n kh√°c.");
    return;
  }

  // Ki·ªÉm tra gi√° ti·ªÅn h·ª£p l·ªá
  if (isNaN(price) || parseFloat(price) <= 0) {
    alert("Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng!");
    return;
  }

  const newProduct = {
    name: name,
    price: parseFloat(price),
    screen: screen,
    backCamera: backCamera,
    frontCamera: frontCamera,
    img: img,
    desc: desc,
    type: type
  };

  Utils.turnOnLoading();
  productService
    .createProduct(newProduct)
    .then((res) => {
      Utils.turnOffLoading();
      console.log("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng:", res);
      alert("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
      fetchListProducts();
      resetForm();
      // ƒê√≥ng modal Bootstrap
      var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById("phoneModal"));
      modal.hide();
    })
    .catch((err) => {
      Utils.turnOffLoading();
      console.log("L·ªói khi th√™m s·∫£n ph·∫©m:", err);
      alert("C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m!");
    });
};

// === EDIT PRODUCT === 
let editProduct = (productId) => {
  editingProductId = productId;
  console.log("Edit product ID:", productId);
  
  // Chuy·ªÉn modal sang ch·∫ø ƒë·ªô Edit
  document.getElementById("phoneModalLabel").textContent = "Edit Phone";
  document.getElementById("addPhoneBtn").style.display = "none";
  document.getElementById("savePhoneBtn").style.display = "inline-block";
  
  productService
    .getById(productId)
    .then((res) => {
      let product = res.data;
      console.log("D·ªØ li·ªáu s·∫£n ph·∫©m c·∫ßn edit:", product);
      
      // ƒêi·ªÅn d·ªØ li·ªáu v√†o form
      document.getElementById("name").value = product.name;
      document.getElementById("price").value = product.price;
      document.getElementById("screen").value = product.screen;
      document.getElementById("backCamera").value = product.backCamera;
      document.getElementById("frontCamera").value = product.frontCamera;
      document.getElementById("img").value = product.img;
      document.getElementById("desc").value = product.desc;
      document.getElementById("type").value = product.type;
    })
    .catch((err) => {
      console.log("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", err);
      alert("C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin s·∫£n ph·∫©m!");
    });
};

// === UPDATE PRODUCT === 
let saveUpdate = () => {
  let name = document.getElementById("name").value.trim();
  let price = document.getElementById("price").value;
  let screen = document.getElementById("screen").value;
  let backCamera = document.getElementById("backCamera").value;
  let frontCamera = document.getElementById("frontCamera").value;
  let img = document.getElementById("img").value;
  let desc = document.getElementById("desc").value;
  let type = document.getElementById("type").value;

  // Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o r·ªóng
  if (!name || !price || !screen || !backCamera || !frontCamera || !img || !desc || !type || type === "Select brand") {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  // Ki·ªÉm tra tr√πng t√™n s·∫£n ph·∫©m (tr·ª´ s·∫£n ph·∫©m hi·ªán t·∫°i)
  if (validateProductName(name, editingProductId)) {
    alert("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn t√™n kh√°c.");
    return;
  }

  // Ki·ªÉm tra gi√° ti·ªÅn h·ª£p l·ªá
  if (isNaN(price) || parseFloat(price) <= 0) {
    alert("Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng!");
    return;
  }

  const updatedProduct = {
    name: name,
    price: parseFloat(price),
    screen: screen,
    backCamera: backCamera,
    frontCamera: frontCamera,
    img: img,
    desc: desc,
    type: type
  };

  Utils.turnOnLoading();
  productService
    .updateProduct(updatedProduct, editingProductId)
    .then((res) => {
      Utils.turnOffLoading();
      console.log("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng:", res);
      alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      
      editingProductId = null;
      fetchListProducts();
      resetForm();
      
      // ƒê√≥ng modal Bootstrap
      var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById("phoneModal"));
      modal.hide();
    })
    .catch((err) => {
      Utils.turnOffLoading();
      console.log("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
      alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m!");
    });
};

// === SEARCH FUNCTION === 
let searchProducts = () => {
  let searchTerm = document.getElementById("searchInput").value.trim().toLowerCase();

  // L·ªçc danh s√°ch theo t√™n s·∫£n ph·∫©m
  const filteredProducts = allProducts.filter(
    (product) => product.name && product.name.toLowerCase().includes(searchTerm)
  );

  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  renderProductsTable(filteredProducts);
};

// === FORM FUNCTIONS ===
let resetForm = () => {
  document.getElementById("name").value = "";
  document.getElementById("price").value = "";
  document.getElementById("screen").value = "";
  document.getElementById("backCamera").value = "";
  document.getElementById("frontCamera").value = "";
  document.getElementById("img").value = "";
  document.getElementById("desc").value = "";
  document.getElementById("type").value = "Select brand";
  editingProductId = null;
};

// === SETUP ADD MODE ===
let setupAddMode = () => {
  // Chuy·ªÉn modal sang ch·∫ø ƒë·ªô Add
  document.getElementById("phoneModalLabel").textContent = "Add New Phone";
  document.getElementById("addPhoneBtn").style.display = "inline-block";
  document.getElementById("savePhoneBtn").style.display = "none";
  
  // Reset form
  resetForm();
};

