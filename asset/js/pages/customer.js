// Customer Page Logic

// === LOADING FUNCTIONS ===
let turnOnLoading = () => {
    document.getElementById("loading").style.display = "flex";
};

let turnOffLoading = () => {
    document.getElementById("loading").style.display = "none";
};

// === VARIABLES ===
let allProducts = []; // L∆∞u t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ API
let cartItems = []; // L∆∞u gi·ªè h√†ng
let currentFilter = "all"; // B·ªô l·ªçc hi·ªán t·∫°i

// === FETCH PRODUCTS ===
let fetchListProducts = () => {
    turnOnLoading();
    productService
        .getList()
        .then((res) => {
            turnOffLoading();
            let products = res.data;
            console.log("üöÄ - Products:", products);
            allProducts = products; // L∆∞u ƒë·ªÉ filter
            renderListProducts(products);
        })
        .catch((err) => {
            turnOffLoading();
            console.log("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
        });
};

// G·ªçi khi trang load
fetchListProducts();

// === RENDER PRODUCTS ===
let renderListProducts = (products) => {
    let contentHTML = "";

    products.forEach((product) => {
        let { id, name, price, screen, backCamera, frontCamera, img, desc, type } = product;

        let productCard = `
      <div class="product-card" data-id="${id}" onclick="viewProductDetail('${id}')" style="cursor: pointer;">
        <img src="${img}" alt="${name}" class="product-image" />
        <div class="product-info">
          <h3 class="product-name">${name}</h3>
          <p class="product-price">${formatPrice(price)} VND</p>
        </div>
        <div class="product-actions">
          <button onclick="event.stopPropagation(); addToCart('${id}')" class="add-to-cart-btn">
            üõí Th√™m v√†o gi·ªè
          </button>
        </div>
      </div>
    `;
        contentHTML += productCard;
    });

    document.querySelector(".product-grid").innerHTML = contentHTML;
};

// === FORMAT PRICE ===
let formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price);
};

// === ADD TO CART ===
let addToCart = (productId) => {
    // T√¨m s·∫£n ph·∫©m trong danh s√°ch
    let product = allProducts.find(p => p.id === productId);
    if (!product) {
        alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!");
        return;
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    cartService
        .getList()
        .then((res) => {
            let existingItems = res.data;
            let existingItem = existingItems.find(item => {
                return item.product && item.product.id === productId;
            });

            if (existingItem) {
                // N·∫øu ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
                existingItem.soLuong += 1;

                cartService
                    .updateCartItem(existingItem, existingItem.id)
                    .then(() => {
                        console.log("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng");
                        alert(`ƒê√£ tƒÉng s·ªë l∆∞·ª£ng ${product.name} trong gi·ªè h√†ng!`);
                        fetchCartItems();
                    })
                    .catch((err) => {
                        console.log("L·ªói khi c·∫≠p nh·∫≠t:", err);
                    });
            } else {
                // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
                let cartItem = {
                    product: product,
                    soLuong: 1
                };

                cartService
                    .addToCart(cartItem)
                    .then((res) => {
                        console.log("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng:", res);
                        alert(`ƒê√£ th√™m ${product.name} v√†o gi·ªè h√†ng!`);
                        fetchCartItems();
                    })
                    .catch((err) => {
                        console.log("L·ªói khi th√™m v√†o gi·ªè h√†ng:", err);
                        alert("C√≥ l·ªói x·∫£y ra khi th√™m v√†o gi·ªè h√†ng!");
                    });
            }
        })
        .catch((err) => {
            console.log("L·ªói khi ki·ªÉm tra gi·ªè h√†ng:", err);
            alert("C√≥ l·ªói x·∫£y ra!");
        });
};

// === FETCH CART ITEMS ===
let fetchCartItems = () => {
    cartService
        .getList()
        .then((res) => {
            cartItems = res.data;
            console.log("üöÄ - Cart Items:", cartItems);
            updateCartUI();
        })
        .catch((err) => {
            console.log("L·ªói khi l·∫•y gi·ªè h√†ng:", err);
        });
};

// G·ªçi khi trang load
fetchCartItems();

// === UPDATE CART UI ===
let updateCartUI = () => {
    let cartCount = cartItems.length;
    let cartCountElement = document.querySelector(".cart-count");
    if (cartCountElement) {
        cartCountElement.textContent = cartCount;
    }
};

// === VIEW PRODUCT DETAIL ===
let viewProductDetail = (productId) => {
    productService
        .getById(productId)
        .then((res) => {
            let product = res.data;
            console.log("Chi ti·∫øt s·∫£n ph·∫©m:", product);
            // Hi·ªÉn th·ªã modal ho·∫∑c chuy·ªÉn trang
            showProductModal(product);
        })
        .catch((err) => {
            console.log("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", err);
        });
};

// === SHOW PRODUCT MODAL ===
let showProductModal = (product) => {
    let modalHTML = `
    <div class="product-modal" id="productModal" onclick="closeProductModal()">
      <div class="modal-content" onclick="event.stopPropagation()">
        <div class="modal-header">
          <button class="close-btn" onclick="closeProductModal()">
            <i class="fas fa-times"></i>
            <span style="display: none;">&times;</span>
          </button>
        </div>
        
        <div class="modal-body">
          <div class="product-image-section">
            <img src="${product.img}" alt="${product.name}" class="modal-product-image" />
          </div>
          
          <div class="product-details-section">
            <h2 class="product-title">${product.name}</h2>
            <div class="product-price">${formatPrice(product.price)} VND</div>
            
            <div class="product-specs">
              <div class="spec-item">
                <span class="spec-label">Lo·∫°i:</span>
                <span class="spec-value">${product.type}</span>
              </div>
              <div class="spec-item">
                <span class="spec-label">M√†n h√¨nh:</span>
                <span class="spec-value">${product.screen}</span>
              </div>
              <div class="spec-item">
                <span class="spec-label">Camera sau:</span>
                <span class="spec-value">${product.backCamera}</span>
              </div>
              <div class="spec-item">
                <span class="spec-label">Camera tr∆∞·ªõc:</span>
                <span class="spec-value">${product.frontCamera}</span>
              </div>
            </div>
            
            <div class="product-description">
              <h4>M√¥ t·∫£ s·∫£n ph·∫©m</h4>
              <p>${product.desc}</p>
            </div>
            
            <div class="modal-actions">
              <button onclick="addToCart('${product.id}')" class="modal-add-to-cart-btn">
                <i class="fas fa-shopping-cart"></i>
                Th√™m v√†o gi·ªè h√†ng
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);

    // Th√™m animation v√†o modal
    setTimeout(() => {
        document.getElementById("productModal").classList.add('show');
    }, 10);
};

let closeProductModal = () => {
    let modal = document.getElementById("productModal");
    if (modal) {
        modal.classList.add('hide');
        // ƒê·ª£i animation xong r·ªìi m·ªõi x√≥a element
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
};

// === FILTER FUNCTIONS ===
let filterByType = (type) => {
    currentFilter = type;
    let filteredProducts = allProducts;

    // N·∫øu type r·ªóng ho·∫∑c "all" th√¨ hi·ªÉn th·ªã t·∫•t c·∫£
    if (type && type !== "all" && type !== "") {
        filteredProducts = allProducts.filter(product =>
            product.type.toLowerCase() === type.toLowerCase()
        );
    }

    console.log(`üîç Filter by type: "${type}", Found: ${filteredProducts.length} products`);
    renderListProducts(filteredProducts);
};

// === SEARCH FUNCTION ===
let searchProducts = () => {
    let searchTerm = document.getElementById("searchInput").value.toLowerCase();

    let filteredProducts = allProducts.filter(product =>
        product.name.toLowerCase().includes(searchTerm) ||
        product.desc.toLowerCase().includes(searchTerm) ||
        product.type.toLowerCase().includes(searchTerm)
    );

    renderListProducts(filteredProducts);
};

// === SHOW CART ===
let showCart = () => {
    cartService
        .getList()
        .then((res) => {
            let cartItems = res.data;
            console.log("Cart Items t·ª´ API:", cartItems);

            let cartHTML = `
        <div class="cart-modal" id="cartModal" onclick="closeCart()">
          <div class="modal-content" onclick="event.stopPropagation()">
            <div class="modal-header">
              <h2 class="cart-title">Gi·ªè h√†ng c·ªßa b·∫°n</h2>
              <button class="close-btn" onclick="closeCart()">
                <i class="fas fa-times"></i>
                <span style="display: none;">&times;</span>
              </button>
            </div>
            <div class="cart-items">
      `;
            let total = 0;
            if (cartItems.length === 0) {
                cartHTML += `
          <div class="empty-cart">
            <i class="fas fa-shopping-cart empty-cart-icon"></i>
            <p class="empty-cart-message">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
            <p class="empty-cart-submessage">B·∫Øt ƒë·∫ßu mua s·∫Øm n√†o!</p>
          </div>
        `;
            } else {

                
                cartItems.forEach(item => {
                    console.log("Processing cart item:", item);

                    // C·∫•u tr√∫c m·ªõi: item tr·ª±c ti·∫øp c√≥ { product: {...}, soLuong: number }
                    if (item.product && item.soLuong) {
                        total += item.product.price * item.soLuong;

                        cartHTML += `
            <div class="cart-item">
              <img src="${item.product.img}" alt="${item.product.name}" />
              <div class="item-info">
                <h4>${item.product.name}</h4>
                <p class="item-price">Gi√°: ${formatPrice(item.product.price)} VND</p>
                <div class="quantity-controls">
                  <button onclick="updateQuantity('${item.id}', ${item.soLuong - 1})" class="quantity-btn decrease">-</button>
                  <span class="quantity-display">${item.soLuong}</span>
                  <button onclick="updateQuantity('${item.id}', ${item.soLuong + 1})" class="quantity-btn increase">+</button>
                </div>
              </div>
              <button onclick="removeFromCart('${item.id}')" class="remove-btn">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          `;
                    } else {
                        console.warn("C·∫•u tr√∫c cart item kh√¥ng h·ª£p l·ªá:", item);
                    }
                });
            } // ƒê√≥ng block else c·ªßa empty cart check

            cartHTML += `
            </div>`;

            // Ch·ªâ hi·ªÉn th·ªã total v√† actions khi c√≥ s·∫£n ph·∫©m
            if (cartItems.length > 0) {
                cartHTML += `
            <div class="cart-total">
              <h3>T·ªïng c·ªông: ${formatPrice(total)} VND</h3>
            </div>
            <div class="cart-actions">
              <button onclick="clearCart()" class="clear-cart-btn">X√≥a t·∫•t c·∫£</button>
              <button onclick="checkout()" class="checkout-btn">Thanh to√°n</button>
            </div>`;
            }

            cartHTML += `
          </div>
        </div>
      `;

            document.body.insertAdjacentHTML('beforeend', cartHTML);
        })
        .catch((err) => {
            console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", err);
            alert("C√≥ l·ªói khi t·∫£i gi·ªè h√†ng!");
        });
};

let closeCart = () => {
    let modal = document.getElementById("cartModal");
    if (modal) {
        modal.remove();
    }
};

// === REFRESH CART CONTENT ===
let refreshCartContent = () => {
  const cartModal = document.getElementById("cartModal");
  if (!cartModal) return; // Kh√¥ng c√≥ modal ƒëang m·ªü
  
  cartService
    .getList()
    .then((res) => {
      let cartItems = res.data;
      console.log("Refreshing cart content:", cartItems);
      
      // T·∫°o n·ªôi dung cart items m·ªõi
      let cartItemsHTML = '';
      let total = 0;
      
      if (cartItems.length === 0) {
        cartItemsHTML = `
          <div class="empty-cart">
            <i class="fas fa-shopping-cart empty-cart-icon"></i>
            <p class="empty-cart-message">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>
            <p class="empty-cart-submessage">H√£y th√™m s·∫£n ph·∫©m ƒë·ªÉ b·∫Øt ƒë·∫ßu mua s·∫Øm!</p>
          </div>
        `;
      } else {
        cartItems.forEach(item => {
          // C·∫•u tr√∫c: item tr·ª±c ti·∫øp c√≥ { product: {...}, soLuong: number }
          if (item.product && item.soLuong) {
            total += item.product.price * item.soLuong;
            
            cartItemsHTML += `
              <div class="cart-item">
                <img src="${item.product.img}" alt="${item.product.name}" />
                <div class="item-info">
                  <h4>${item.product.name}</h4>
                  <p class="item-price">Gi√°: ${formatPrice(item.product.price)} VND</p>
                  <div class="quantity-controls">
                    <button onclick="updateQuantity('${item.id}', ${item.soLuong - 1})" class="quantity-btn decrease">-</button>
                    <span class="quantity-display">${item.soLuong}</span>
                    <button onclick="updateQuantity('${item.id}', ${item.soLuong + 1})" class="quantity-btn increase">+</button>
                  </div>
                </div>
                <button onclick="removeFromCart('${item.id}')" class="remove-btn">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            `;
          }
        });
      }
      
      // C·∫≠p nh·∫≠t n·ªôi dung cart items
      const cartItemsContainer = cartModal.querySelector('.cart-items');
      if (cartItemsContainer) {
        cartItemsContainer.innerHTML = cartItemsHTML;
      }
      
      // C·∫≠p nh·∫≠t ho·∫∑c ·∫©n/hi·ªán ph·∫ßn total v√† actions
      let cartTotal = cartModal.querySelector('.cart-total');
      let cartActions = cartModal.querySelector('.cart-actions');
      
      if (cartItems.length > 0) {
        // Hi·ªÉn th·ªã total
        if (cartTotal) {
          cartTotal.innerHTML = `<h3>T·ªïng c·ªông: ${formatPrice(total)} VND</h3>`;
          cartTotal.style.display = 'block';
        } else {
          // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
          const totalHTML = `
            <div class="cart-total">
              <h3>T·ªïng c·ªông: ${formatPrice(total)} VND</h3>
            </div>
          `;
          cartItemsContainer.insertAdjacentHTML('afterend', totalHTML);
        }
        
        // Hi·ªÉn th·ªã actions
        if (cartActions) {
          cartActions.style.display = 'flex';
        } else {
          // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
          const actionsHTML = `
            <div class="cart-actions">
              <button onclick="clearCart()" class="clear-cart-btn">X√≥a t·∫•t c·∫£</button>
              <button onclick="checkout()" class="checkout-btn">Thanh to√°n</button>
            </div>
          `;
          (cartTotal || cartItemsContainer).insertAdjacentHTML('afterend', actionsHTML);
        }
      } else {
        // ·∫®n total v√† actions khi gi·ªè h√†ng tr·ªëng
        if (cartTotal) cartTotal.style.display = 'none';
        if (cartActions) cartActions.style.display = 'none';
      }
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ·ªü n√∫t gi·ªè h√†ng floating
      fetchCartItems();
    })
    .catch((err) => {
      console.error("L·ªói khi refresh cart content:", err);
    });
};

// === UPDATE QUANTITY ===
let updateQuantity = (cartId, newQuantity) => {
    if (newQuantity <= 0) {
        removeFromCart(cartId);
        return;
    }

    cartService
        .getById(cartId)
        .then((res) => {
            let cartData = res.data; 
            cartData.soLuong = newQuantity;

            return cartService.updateCartItem(cartData, cartId);
        })
        .then(() => {
            console.log("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng");
            // Ch·ªâ refresh n·ªôi dung, kh√¥ng ƒë√≥ng popup
            refreshCartContent();
        })
        .catch((err) => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
            alert("C√≥ l·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
        });
};

// === REMOVE FROM CART ===
let removeFromCart = (cartId) => {
    cartService
        .deleteById(cartId)
        .then((res) => {
            console.log("X√≥a kh·ªèi gi·ªè h√†ng th√†nh c√¥ng:", res);
            // Ch·ªâ refresh n·ªôi dung, kh√¥ng ƒë√≥ng popup
            refreshCartContent();
        })
        .catch((err) => {
            console.log("L·ªói khi x√≥a kh·ªèi gi·ªè h√†ng:", err);
        });
};

// === CLEAR CART ===
let clearCart = () => {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng?")) {
        cartService
            .clearCart()
            .then(() => {
                console.log("X√≥a to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng");
                // Refresh n·ªôi dung ƒë·ªÉ hi·ªÉn th·ªã empty state
                refreshCartContent();
                alert("ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng!");
            })
            .catch((err) => {
                console.log("L·ªói khi x√≥a gi·ªè h√†ng:", err);
            });
    }
};

// === CHECKOUT ===
let checkout = () => {
    // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng hi·ªán t·∫°i
    cartService
        .getList()
        .then((res) => {
            let cartItems = res.data;
            if (cartItems.length === 0) {
                alert("Gi·ªè h√†ng tr·ªëng!");
                return;
            }
            
            // ƒê√≥ng modal gi·ªè h√†ng
            closeCart();
            
            // Hi·ªÉn th·ªã popup bill
            showCheckoutBill(cartItems);
        })
        .catch((err) => {
            console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", err);
            alert("C√≥ l·ªói x·∫£y ra!");
        });
};

// === SHOW CHECKOUT BILL ===
let showCheckoutBill = (cartItems) => {
    let total = 0;
    let itemsHTML = '';
    
    cartItems.forEach(item => {
        if (item.product && item.soLuong) {
            let itemTotal = item.product.price * item.soLuong;
            total += itemTotal;
            
            itemsHTML += `
                <tr class="bill-item">
                    <td class="item-name">${item.product.name}</td>
                    <td class="item-price">${formatPrice(item.product.price)} VND</td>
                    <td class="item-quantity">x${item.soLuong}</td>
                    <td class="item-total">${formatPrice(itemTotal)} VND</td>
                </tr>
            `;
        }
    });
    
    const currentDate = new Date().toLocaleDateString('vi-VN');
    const currentTime = new Date().toLocaleTimeString('vi-VN');
    
    let billHTML = `
        <div class="checkout-modal" id="checkoutModal" onclick="closeCheckoutBill()">
            <div class="bill-content" onclick="event.stopPropagation()">
                <div class="bill-header">
                    <h2 class="bill-title">üßæ H√≥a ƒë∆°n thanh to√°n</h2>
                    <button class="close-btn" onclick="closeCheckoutBill()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="bill-info">
                    <div class="shop-info">
                        <h3>üè™ C·ª≠a H√†ng ƒêi·ªán Tho·∫°i</h3>
                        <p>üìç ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ</p>
                        <p>üìû Hotline: 0123-456-789</p>
                    </div>
                    
                    <div class="bill-date">
                        <p>üìÖ Ng√†y: ${currentDate}</p>
                        <p>üïê Gi·ªù: ${currentTime}</p>
                    </div>
                </div>
                
                <div class="bill-items">
                    <table class="bill-table">
                        <thead>
                            <tr>
                                <th>S·∫£n ph·∫©m</th>
                                <th>ƒê∆°n gi√°</th>
                                <th>SL</th>
                                <th>Th√†nh ti·ªÅn</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHTML}
                        </tbody>
                    </table>
                </div>
                
                <div class="bill-summary">
                    <div class="bill-total">
                        <h3>üí∞ T·ªïng c·ªông: ${formatPrice(total)} VND</h3>
                    </div>
                    
                    <div class="payment-method">
                        <h4>üí≥ H√¨nh th·ª©c thanh to√°n:</h4>
                        <div class="payment-options">
                            <label class="payment-option">
                                <input type="radio" name="payment" value="cash" checked>
                                <span>üíµ Ti·ªÅn m·∫∑t</span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="bill-actions">
                    <button onclick="closeCheckoutBill()" class="cancel-btn">‚ùå H·ªßy</button>
                    <button onclick="confirmPayment()" class="confirm-btn">‚úÖ X√°c nh·∫≠n thanh to√°n</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', billHTML);
    
    // Th√™m animation
    setTimeout(() => {
        document.getElementById("checkoutModal").classList.add('show');
    }, 10);
};

// === CLOSE CHECKOUT BILL ===
let closeCheckoutBill = () => {
    let modal = document.getElementById("checkoutModal");
    if (modal) {
        modal.classList.add('hide');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
};

// === CONFIRM PAYMENT ===
let confirmPayment = () => {
    // Hi·ªÉn th·ªã loading
    const confirmBtn = document.querySelector('.confirm-btn');
    const originalText = confirmBtn.innerHTML;
    confirmBtn.innerHTML = '‚è≥ ƒêang x·ª≠ l√Ω...';
    confirmBtn.disabled = true;
    
    // Simulate payment processing
    setTimeout(() => {
        console.log("üîÑ Starting payment process...");
        
        // Clear to√†n b·ªô gi·ªè h√†ng
        cartService
            .clearCart()
            .then(() => {
                console.log("‚úÖ Payment successful - Cart cleared");
                
                // Verify cart is actually empty
                return cartService.getList();
            })
            .then((res) => {
                console.log("üìã Cart verification after payment:", res.data.length, "items remaining");
                
                // ƒê√≥ng bill modal
                closeCheckoutBill();
                
                // C·∫≠p nh·∫≠t UI gi·ªè h√†ng
                fetchCartItems();
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                showPaymentSuccess();
                
                // N·∫øu v·∫´n c√≤n items, log warning
                if (res.data.length > 0) {
                    console.warn("‚ö†Ô∏è Warning: Some items still remain in cart after payment!");
                    console.warn("Remaining items:", res.data);
                }
            })
            .catch((err) => {
                console.error("‚ùå Payment failed - Error clearing cart:", err);
                
                // Restore button
                confirmBtn.innerHTML = originalText;
                confirmBtn.disabled = false;
                
                alert("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n! Vui l√≤ng th·ª≠ l·∫°i.");
            });
    }, 1500); // Simulate processing time
};

// === SHOW PAYMENT SUCCESS ===
let showPaymentSuccess = () => {
    let successHTML = `
        <div class="success-modal" id="successModal">
            <div class="success-content">
                <div class="success-icon">‚úÖ</div>
                <h2>Thanh to√°n th√†nh c√¥ng!</h2>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng t·∫°i c·ª≠a h√†ng ch√∫ng t√¥i</p>
                <button onclick="closeSuccessModal()" class="success-btn">Ti·∫øp t·ª•c mua s·∫Øm</button>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', successHTML);
    
    // Auto close after 3 seconds
    setTimeout(() => {
        closeSuccessModal();
    }, 3000);
};

// === CLOSE SUCCESS MODAL ===
let closeSuccessModal = () => {
    let modal = document.getElementById("successModal");
    if (modal) {
        modal.remove();
    }
};

// === SCROLL TO TOP ===
let scrollToTop = () => {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
};

// === SHOW/HIDE SCROLL TO TOP BUTTON ===
window.addEventListener('scroll', () => {
    let scrollToTopBtn = document.getElementById('scrollToTop');
    if (scrollToTopBtn) {
        if (window.pageYOffset > 300) {
            scrollToTopBtn.classList.add('visible');
        } else {
            scrollToTopBtn.classList.remove('visible');
        }
    }
});